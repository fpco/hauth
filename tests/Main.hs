{-# LANGUAGE CPP               #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RankNTypes        #-}

#if __GLASGOW_HASKELL__ < 710
import           Control.Applicative ((<$>))
#endif

import           Data.Text (Text)
import           Test.Hspec (shouldBe, it, describe)
import           Test.Hspec.Attoparsec
       (Source((~>)), shouldParse, shouldFailOn)
import           Test.Tasty (TestTree, testGroup, defaultMain)
import           Test.Tasty.Hspec (testSpec)
import           Network.HAuth
import           Network.HAuth.Parse

main :: IO ()
main = do
    tests <-
        testGroup "all" <$>
        sequence
            [ idAttrParserSpec
            , tsAttrParserSpec
            , nonceAttrParserSpec
            , extAttrParserSpec
            , macAttrParserSpec
            , authHeaderParserSpec
            , authHeaderToAuthSpec]
    defaultMain tests

{-

https://tools.ietf.org/html/draft-ietf-oauth-v2-http-mac-01#section-3.1

   The header attributes are set as follows:

   id
         REQUIRED.  The MAC key identifier.
   ts
         REQUIRED.  The request timestamp.  The value MUST be a positive
         integer set by the client when making each request to the
         number of seconds elapsed from a fixed point in time (e.g.
         January 1, 1970 00:00:00 GMT).  The value MUST NOT include
         leading zeros (e.g. "000273154346").
   nonce
         REQUIRED.  A unique string generated by the client.  The value
         MUST be unique across all requests with the same timestamp and
         MAC key identifier combination.
   ext
         OPTIONAL.  A string used to include additional information
         which is covered by the request MAC.  The content and format of
         the string is beyond the scope of this specification.
   mac
         REQUIRED.  The HTTP request MAC as described in Section 3.2.

   Attributes MUST NOT appear more than once.  Attribute values are
   limited to a subset of ASCII, which does not require escaping, as
   defined by the plain-string ABNF.

-}

idAttrParserSpec :: IO TestTree
idAttrParserSpec = do
    testSpec "HAuth Auth Header ID Attribute Parser" $
        do describe "id k/v parser" $
               do it "id key should be lower case" $
                      do idP `shouldFailOn` ("ID=abc" :: Text)
                         idP `shouldFailOn` ("Id=abc" :: Text)
                  it "id value is required" $
                      do idP `shouldFailOn` ("id" :: Text)
                         idP `shouldFailOn` ("id=" :: Text)
                  it "id value should be plain-string" $
                      do ("id=abc" :: Text) ~> idP `shouldParse`
                             (IdKey, IdVal "abc")
                         ("id=123" :: Text) ~> idP `shouldParse`
                             (IdKey, IdVal "123")
                         ("id=abc123" :: Text) ~> idP `shouldParse`
                             (IdKey, IdVal "abc123")

tsAttrParserSpec :: IO TestTree
tsAttrParserSpec = do
    testSpec "HAuth Auth Header TsAttr Parser" $
        do describe "ts k/v parser" $
               do it "ts key should be lower case" $
                      do tsP `shouldFailOn` ("TS=abc" :: Text)
                         tsP `shouldFailOn` ("Ts=abc" :: Text)
                  it "ts value is required" $
                      do tsP `shouldFailOn` ("ts" :: Text)
                         tsP `shouldFailOn` ("ts=" :: Text)
                  it "ts value should be an integer" $
                      do ("ts=123" :: Text) ~> tsP `shouldParse`
                             (TsKey, TsVal 123)
-- TODO: update the parser to fail on zero-padded ts values
               -- it "should fail to parse numbers with leading zeros" $
               --     do 1 `shouldBe` 1

nonceAttrParserSpec :: IO TestTree
nonceAttrParserSpec = do
    testSpec "HAuth Auth Header NonceAttr Parser" $
        do describe "nonce k/v parser" $
               do it "nonce value should be plain-string" $
                      do ("nonce=xyz123" :: Text) ~> nonceP `shouldParse`
                             (NonceKey, NonceVal "xyz123")
                  it "nonce value is required" $
                      do nonceP `shouldFailOn` ("nonce" :: Text)
                         nonceP `shouldFailOn` ("nonce=" :: Text)
                  it "nonce value should be plain-string" $
                      do ("nonce=abc" :: Text) ~> nonceP `shouldParse`
                             (NonceKey, NonceVal "abc")
                         ("nonce=123" :: Text) ~> nonceP `shouldParse`
                             (NonceKey, NonceVal "123")
                         ("nonce=abc123" :: Text) ~> nonceP `shouldParse`
                             (NonceKey, NonceVal "abc123")

extAttrParserSpec :: IO TestTree
extAttrParserSpec = do
    testSpec "HAuth Auth Header ExtAttr Parser" $
        do describe "ext k/v parser" $
               do it "ext value is required (if key is present)" $
                      do extP `shouldFailOn` ("ext" :: Text)
                         extP `shouldFailOn` ("ext=" :: Text)
                  it "ext value should be plain-string" $
                      do ("ext=abc" :: Text) ~> extP `shouldParse`
                             (ExtKey, ExtVal "abc")
                         ("ext=123" :: Text) ~> extP `shouldParse`
                             (ExtKey, ExtVal "123")
                         ("ext=abc123" :: Text) ~> extP `shouldParse`
                             (ExtKey, ExtVal "abc123")

macAttrParserSpec :: IO TestTree
macAttrParserSpec = do
    testSpec "HAuth Auth Header MacAttr Parser" $
        do describe "mac k/v parser" $
               do it "mac value is required" $
                      do macP `shouldFailOn` ("mac" :: Text)
                         macP `shouldFailOn` ("mac=" :: Text)
                  it "mac value should be plain-string" $
                      do ("mac=abc" :: Text) ~> macP `shouldParse`
                             (MacKey, MacVal "abc")
                         ("mac=123" :: Text) ~> macP `shouldParse`
                             (MacKey, MacVal "123")
                         ("mac=abc123" :: Text) ~> macP `shouldParse`
                             (MacKey, MacVal "abc123")

authHeaderParserSpec :: IO TestTree
authHeaderParserSpec =
    testSpec "HAuth Auth Header Parser" $
    do describe "auth header parser" $
           do it "auth header should parse id,ts,nonce,ext & mac attributes" $
                  do ("MAC id=lol ts=890 nonce=487 mac=af0" :: Text) ~>
                         authHeaderP `shouldParse`
                         [ (IdKey, IdVal "lol")
                         , (TsKey, TsVal 890)
                         , (NonceKey, NonceVal "487")
                         , (MacKey, MacVal "af0")]
                     ("MAC id=lol ts=890 nonce=487 ext=yay mac=af0" :: Text) ~>
                         authHeaderP `shouldParse`
                         [ (IdKey, IdVal "lol")
                         , (TsKey, TsVal 890)
                         , (NonceKey, NonceVal "487")
                         , (ExtKey, ExtVal "yay")
                         , (MacKey, MacVal "af0")]
              it "auth header should fail if anything unknown is present" $
                  do authHeaderP `shouldFailOn`
                         ("MAC lol=true id=heh ts=837 nonce=298 mac=eff" :: Text)

authHeaderToAuthSpec :: IO TestTree
authHeaderToAuthSpec =
    testSpec "HAuth AuthHeader->Auth Transformation" $
    do describe "auth header transform" $
           do it "should convert a valid auth header to auth record" $
                  do authHeaderToAuth
                         [ (IdKey, IdVal "lol")
                         , (TsKey, TsVal 890)
                         , (NonceKey, NonceVal "487")
                         , (MacKey, MacVal "af0")] `shouldBe`
                         Right (Auth (AuthID "lol") (AuthTS 890) (AuthNonce "487") Nothing (AuthMAC "af0"))
